#!/usr/bin/env python

import glib
import gobject
import gst
import threading
import os.path
import sys
import time
import grooveshark

__version__ = '0.1.0'

class InputHandlerThread(threading.Thread):
    LINEMODE_CHAR   = 0
    LINEMODE_LINE   = 1
    
    def __init__(self, input_callback):
        threading.Thread.__init__(self)
        self.keep_running = True
        self.line_mode = self.LINEMODE_CHAR
        self._input_callback = input_callback
        
    def run(self):
        print 'Reading input'
        while True:
            data = None
            if self.line_mode is self.LINEMODE_LINE:
                data = sys.stdin.read(1)
            else:
                data = sys.stdin.readline()
            self._input_callback(data)

class Cli_Player(object):
    def __init__(self):
        self._init_gs_client()
        self._init_player()
        self._init_input_handler()
        print 'Player created'

    def run(self):
        gobject.threads_init()
        self._main_loop = glib.MainLoop()
        print 'Player running'
        self._main_loop.run()

    def _init_gs_client(self):
        self._gs_client = grooveshark.Client()
        self._gs_client.init()

    def _init_player(self):
        self.playing = False
        self._player = gst.element_factory_make('playbin2', 'player')
        self._player.set_property('video-sink',
            gst.element_factory_make('fakesink', 'fakesink'))
        message_bus = self._player.get_bus()
        message_bus.add_signal_watch()
        message_bus.connect('message', self._on_message)
    
    def _init_input_handler(self):
        self._input_handler = InputHandlerThread(self._on_input)
        self._input_handler.start()
        #self._input_handler.run()

    def _on_input(self, data):
        print 'Got input: %s' % data
        songs = self._gs_client.search(data, grooveshark.SEARCH_TYPE_SONGS)
        try:
            song = next(songs)
        except StopIteration:
            print 'No songs found!'
        else:
            print 'Found song: %s' % song.name
            self.play_url(song.stream.url)

    def _on_message(self, bus, message):
        #print 'Got GST message: %r' % message
        if message.type == gst.MESSAGE_EOS:
            self._player.set_state(gst.STATE_NULL)
            self.playing = False
        elif message.type == gst.MESSAGE_ERROR:
            self._player.set_state(gst.STATE_NULL)
            sys.stderr.write( 'Error: %s\nDebug: %s\n' % (err, debug))
            self.playing = False
        elif message.type == gst.MESSAGE_BUFFERING and \
            message.parse_buffering() == 100:
            print 'Buffering done!'

    def play_url(self, url):
        self.stop()
        print 'Playing url: %s' % url
        self._player.set_property('uri', url)
        self._player.set_state(gst.STATE_PLAYING)
        while self.playing:
            try:
                pos = self._player.query_position(gst.FORMAT_TIME, None)
            except gst.QueryError:
                pass
            else:
                sys.stdout.write('\r%04d' % (pos[0] // (10 ** 9)))
                sys.stdout.flush()
            time.sleep(0.2)
        time.sleep(1)
    
    def stop(self):
        if self.playing:
            self._player.set_state(gst.STATE_NULL)
            self.playing = False

if __name__ == '__main__':
    #thread.start_new_thread(Cli_Player().start, ())
    Cli_Player().run()